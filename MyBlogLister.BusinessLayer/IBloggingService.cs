//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
namespace MyBlogLister.BusinessLayer.BusinessLayer
{
    /// <summary>
    /// Defines the methods and properties of a database service.
    /// </summary>
    public partial interface IBloggingService
    {
        /// <summary>
        /// Initializes the underlying connection to the data source.  Callers can
        /// optionally pass a data source connection string or other key in the
        /// <paramref name="connectionString" /> parameter.
        /// </summary>
        /// <param name="connectionString">
        /// String containing information to be utilized in
        /// making a connection to the specific data source needed.
        /// </param>
        /// <remarks>
        /// If the <paramref name="connectionString" /> parameter is an empty string
        /// or whitespace, then the default connection to the data source, as configured
        /// in App.config, is utilized.  Otherwise, the connection string passed is
        /// sent to the underlying unit-of-work object.
        /// </remarks>
        void DoInitialize(
            string connectionString = "");
        
        /// <summary>Initializes the underlying connection to the data source.  Callers must pass a reference to an instance of an object that implements the <see cref="T:MyBlogLister.BusinessLayer.BusinessLayer.IBloggingUnitOfWork"/> interface in for the <paramref name="unitOfWorkObject" /> parameter.  This object is utilized to access the underlying data source.
        /// </summary><param name="unitOfWorkObject">(Required.) Reference to an instance of an object that implements the <see cref="T:MyBlogLister.BusinessLayer.BusinessLayer.IBloggingUnitOfWork"/> interface</param>
        void DoInitialize(
            IBloggingUnitOfWork unitOfWorkObject);
        
        /// <summary>Raised when an error occurs.</summary>
        event Action<Exception> ExceptionRaised;
        
        /// <summary>Raised when changes have been successfully saved to the data source.  This event's handler will be passed an integer specifying the number of rows affected by the Save operation.</summary>
        /// <remarks>Subscribe to this event to receive a notification that a Save operation has completed successfully.</remarks>
        event Action<int> ChangesSaved;
        
        /// <summary>Saves changes made to the data source.</summary>
        /// <returns>Number of records affected by the Save operation; -1 if an 
        /// error occurred.</returns>
        /// <remarks>This method will automatically attempt a graceful closure 
        /// of the handle to the underlying data source in the case that the return
        // value is -1.</remarks>
        int Save();
        
        /// <summary>
        /// Gets a value that indicates whether there are changes pending to be
        /// saved to the underlying data source.
        /// </summary>
        bool HasChanges { get; }
        
    }
}
