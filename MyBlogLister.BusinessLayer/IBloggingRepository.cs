//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Collections.Generic;

namespace MyBlogLister.BusinessLayer.BusinessLayer
{
    /// <summary>
    /// Defines the functionality for a repository access which manages access to data.
    /// </summary>
    /// <typeparam name="T">
    /// Type of entity POCO that this class functions as a
    /// repository for.
    /// </typeparam>
    public partial interface IBloggingRepository<T> where T : class
    {
        /// <summary>
        /// Gets all records available in the data source.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.Collections.Generic.IEnumerable{T}" /> that
        /// allows access to the set of all records in the data source.
        /// </returns>
        IEnumerable<T> GetAll();
        
        /// <summary>
        /// Retrieves a record with primary key value <paramref name="id" />, from the
        /// dataset.
        /// </summary>
        /// <param name="id">Id of the record to be obtained.  Must be 1 or greater.</param>
        /// <returns></returns>
        /// <remarks>
        /// An exception will be thrown or a null reference returned if the record
        /// specified cannot be located.
        /// </remarks>
        T GetById(int id);
        
        /// <summary>
        /// Adds a new record, referred to by <paramref name="entity" />, to the dataset.
        /// </summary>
        /// <param name="entity">
        /// Reference to an instance of an entity object identifying
        /// the record to be added.
        /// </param>
        void Add(T entity);
        
        /// <summary>
        /// Deletes the record referred to by <paramref name="entity" /> from the dataset.
        /// </summary>
        /// <param name="entity">
        /// Reference to an instance of an entity object identifying
        /// the record to be removed.
        /// </param>
        void Delete(T entity);
    }
}
